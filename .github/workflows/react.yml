name: Build React App
on:
  push:
    branches:
      - backup
jobs:
  deploy_test:
    runs-on: ubuntu-22.04 
    
    env:
      REACT_APP_SERVER_URL: ${{secrets.REACT_APP_SERVER_URL}}
      REACT_APP_ACCESS_TOKEN: ${{secrets.REACT_APP_ACCESS_TOKEN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Build React app
        run: |
          yarn install
          CI=false yarn build
        
      - name: Copy folder to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_TEST_HOST }}
          username: ${{ secrets.SERVER_TEST_USERNAME }}
          key: ${{ secrets.TEST_SECRET_KEY }}
          source: "./build/*"
          target: "/home/ubuntu/surgery-front/"

      - name: Run React Container
        run: |
          echo "${{ secrets.TEST_SECRET_KEY }}" > ssh_key
          chmod 400 ssh_key
          ssh -i ssh_key -o "StrictHostKeyChecking no" ${{ secrets.SERVER_TEST_USERNAME }}@${{ secrets.SERVER_TEST_HOST }} "docker compose down && docker compose build && docker compose up -d"
  
  deploy_production:
    runs-on: ubuntu-20.04
    
    env:
      REACT_APP_SERVER_URL: ${{secrets.REACT_APP_SERVER_URL}}
      REACT_APP_ACCESS_TOKEN: ${{secrets.REACT_APP_ACCESS_TOKEN}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Build React app
        run: |
          yarn install
          CI=false yarn build
        
      - name: Copy folder to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SECRET_KEY }}
          source: "./build/*"
          target: "/root/surgery-front/"

      - name: Run React Container
        run: |
          echo "${{ secrets.SECRET_KEY }}" > ssh_key
          chmod 400 ssh_key
          ssh -i ssh_key -o "StrictHostKeyChecking no" ${{ secrets.USERNAME }}@${{ secrets.SERVER_HOST }} "docker compose down && docker compose build && docker compose up -d"
    
  deploy_cloud_front:
    runs-on: ubuntu-latest      
    strategy:
      matrix:
        node-version: [ 16.x ]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Create env file
        run: |
          touch .env
          echo REACT_APP_API_ENDPOINT=${{ secrets.REACT_APP_SERVER_URL }}
                REACT_APP_ACCESS_TOKEN=${{ secrets.REACT_APP_ACCESS_TOKEN }} >> .env
          cat .env
      - name: Npm Install
        run: |
          npm install --legacy-peer-deps # Add the --legacy-peer-deps option here.
      - name: Npm Build
        run: |
          CI=false npm run build
        env:
          REACT_APP_SERVER_URL: ${{ secrets.REACT_APP_SERVER_URL }}
          REACT_APP_ACCESS_TOKEN: ${{ secrets.REACT_APP_ACCESS_TOKEN }}
      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_STAGING_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SOURCE_DIR: "build"
